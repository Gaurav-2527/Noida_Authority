//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Noida.Authority.DAL.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NoidaMigrationEntities : DbContext
    {
        public NoidaMigrationEntities()
            : base("name=NoidaMigrationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<OnlineExtensionDetail> OnlineExtensionDetails { get; set; }
        public virtual DbSet<OnlineFirmDirectorMaster> OnlineFirmDirectorMasters { get; set; }
        public virtual DbSet<OnlineFirmRequestMaster> OnlineFirmRequestMasters { get; set; }
        public virtual DbSet<OnlineFunctionalDetail> OnlineFunctionalDetails { get; set; }
        public virtual DbSet<OnlineGPA> OnlineGPAs { get; set; }
        public virtual DbSet<OnlineMortgageDetail> OnlineMortgageDetails { get; set; }
        public virtual DbSet<OnlinePropertyCancellationDetail> OnlinePropertyCancellationDetails { get; set; }
        public virtual DbSet<OnlineRentPermissionDetail> OnlineRentPermissionDetails { get; set; }
        public virtual DbSet<OnlineTransferMutation> OnlineTransferMutations { get; set; }
        public virtual DbSet<AcceptableItem> AcceptableItems { get; set; }
        public virtual DbSet<AccountHeadMst> AccountHeadMsts { get; set; }
        public virtual DbSet<AccountSubHeadMst> AccountSubHeadMsts { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<AllDefaulterList> AllDefaulterLists { get; set; }
        public virtual DbSet<AlloteeListMaster> AlloteeListMasters { get; set; }
        public virtual DbSet<AllotmentMaster> AllotmentMasters { get; set; }
        public virtual DbSet<ApplicationDetail> ApplicationDetails { get; set; }
        public virtual DbSet<ApplicationPaymentDetail> ApplicationPaymentDetails { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<Audit> Audits { get; set; }
        public virtual DbSet<AuditEmailTemplate> AuditEmailTemplates { get; set; }
        public virtual DbSet<AuditItemsLeftbehind> AuditItemsLeftbehinds { get; set; }
        public virtual DbSet<AuditRoute> AuditRoutes { get; set; }
        public virtual DbSet<Auto_Schedule> Auto_Schedule { get; set; }
        public virtual DbSet<BankMst> BankMsts { get; set; }
        public virtual DbSet<BBBSContactInformation> BBBSContactInformations { get; set; }
        public virtual DbSet<BBBSLocation> BBBSLocations { get; set; }
        public virtual DbSet<BinFeeType> BinFeeTypes { get; set; }
        public virtual DbSet<BinPartnershipLocation> BinPartnershipLocations { get; set; }
        public virtual DbSet<BlockMst> BlockMsts { get; set; }
        public virtual DbSet<BranchMst> BranchMsts { get; set; }
        public virtual DbSet<Building_Plan_Master> Building_Plan_Master { get; set; }
        public virtual DbSet<Building_Plan_Trans> Building_Plan_Trans { get; set; }
        public virtual DbSet<CBCode> CBCodes { get; set; }
        public virtual DbSet<Challan_Master> Challan_Master { get; set; }
        public virtual DbSet<Challan_Trans> Challan_Trans { get; set; }
        public virtual DbSet<ChecklistMaster> ChecklistMasters { get; set; }
        public virtual DbSet<ChecklistTran> ChecklistTrans { get; set; }
        public virtual DbSet<ChecklistTypeMaster> ChecklistTypeMasters { get; set; }
        public virtual DbSet<CircleRateMst> CircleRateMsts { get; set; }
        public virtual DbSet<CitizenService_Master> CitizenService_Master { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Common_Config> Common_Config { get; set; }
        public virtual DbSet<Completion_Details> Completion_Details { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer_ServiceRequest> Customer_ServiceRequest { get; set; }
        public virtual DbSet<Customer_ServiceRequestCharges> Customer_ServiceRequestCharges { get; set; }
        public virtual DbSet<Customer_ServiceRequestDocument> Customer_ServiceRequestDocument { get; set; }
        public virtual DbSet<Customer_ServiceStatusTrans> Customer_ServiceStatusTrans { get; set; }
        public virtual DbSet<CustomerMst> CustomerMsts { get; set; }
        public virtual DbSet<CustomerMstOld> CustomerMstOlds { get; set; }
        public virtual DbSet<DailyDriverRoute> DailyDriverRoutes { get; set; }
        public virtual DbSet<DailyDriverScannedCopy> DailyDriverScannedCopies { get; set; }
        public virtual DbSet<DailySummary> DailySummaries { get; set; }
        public virtual DbSet<DateDimension> DateDimensions { get; set; }
        public virtual DbSet<DemandNoteDetail> DemandNoteDetails { get; set; }
        public virtual DbSet<DepartmentMst> DepartmentMsts { get; set; }
        public virtual DbSet<DepartmentSubMst> DepartmentSubMsts { get; set; }
        public virtual DbSet<Director_Request_Master> Director_Request_Master { get; set; }
        public virtual DbSet<Document_Mst> Document_Mst { get; set; }
        public virtual DbSet<DonateDestination> DonateDestinations { get; set; }
        public virtual DbSet<Donation> Donations { get; set; }
        public virtual DbSet<DonationAudit> DonationAudits { get; set; }
        public virtual DbSet<DonationPickupDate> DonationPickupDates { get; set; }
        public virtual DbSet<DonationReceipt> DonationReceipts { get; set; }
        public virtual DbSet<DonationSource> DonationSources { get; set; }
        public virtual DbSet<DonationStatu> DonationStatus { get; set; }
        public virtual DbSet<DonationTransaction> DonationTransactions { get; set; }
        public virtual DbSet<DonationType> DonationTypes { get; set; }
        public virtual DbSet<Donor> Donors { get; set; }
        public virtual DbSet<DonorAddress> DonorAddresses { get; set; }
        public virtual DbSet<DonorAudit> DonorAudits { get; set; }
        public virtual DbSet<DonorStatu> DonorStatus { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<DriverType> DriverTypes { get; set; }
        public virtual DbSet<DWAAction> DWAActions { get; set; }
        public virtual DbSet<DWAAuditHistory> DWAAuditHistories { get; set; }
        public virtual DbSet<DWAReport> DWAReports { get; set; }
        public virtual DbSet<DWAStatu> DWAStatus { get; set; }
        public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }
        public virtual DbSet<EmailType> EmailTypes { get; set; }
        public virtual DbSet<EmployeeMst> EmployeeMsts { get; set; }
        public virtual DbSet<ExcessAreaDetailMst> ExcessAreaDetailMsts { get; set; }
        public virtual DbSet<Extension_Details> Extension_Details { get; set; }
        public virtual DbSet<FillerBlast> FillerBlasts { get; set; }
        public virtual DbSet<FillerBlastHistory> FillerBlastHistories { get; set; }
        public virtual DbSet<Firm_Director_Master> Firm_Director_Master { get; set; }
        public virtual DbSet<Firm_Master> Firm_Master { get; set; }
        public virtual DbSet<Firm_Type_Master> Firm_Type_Master { get; set; }
        public virtual DbSet<FloorMst> FloorMsts { get; set; }
        public virtual DbSet<FunctionalDetail> FunctionalDetails { get; set; }
        public virtual DbSet<GlobalConfigurationSetting> GlobalConfigurationSettings { get; set; }
        public virtual DbSet<GPA> GPAs { get; set; }
        public virtual DbSet<GroupHousingProjectMst> GroupHousingProjectMsts { get; set; }
        public virtual DbSet<HEAD_MASTER> HEAD_MASTER { get; set; }
        public virtual DbSet<HEAD_SUB_MASTER> HEAD_SUB_MASTER { get; set; }
        public virtual DbSet<IngenuityErrorData> IngenuityErrorDatas { get; set; }
        public virtual DbSet<IngenuityErrorDataLog> IngenuityErrorDataLogs { get; set; }
        public virtual DbSet<IngenuityFileUpload> IngenuityFileUploads { get; set; }
        public virtual DbSet<IngenuityFileUserError> IngenuityFileUserErrors { get; set; }
        public virtual DbSet<IngenuityFileUserSuccess> IngenuityFileUserSuccesses { get; set; }
        public virtual DbSet<IngenuityOptIn> IngenuityOptIns { get; set; }
        public virtual DbSet<IngenuityOptOut> IngenuityOptOuts { get; set; }
        public virtual DbSet<IngenuityOutput> IngenuityOutputs { get; set; }
        public virtual DbSet<IngenuityServiceConfiguration> IngenuityServiceConfigurations { get; set; }
        public virtual DbSet<IngenuitySkipNextCycle> IngenuitySkipNextCycles { get; set; }
        public virtual DbSet<IngenuitySuccessData> IngenuitySuccessDatas { get; set; }
        public virtual DbSet<InstallmentDuesPayment> InstallmentDuesPayments { get; set; }
        public virtual DbSet<InstallmentDuesPaymentTran> InstallmentDuesPaymentTrans { get; set; }
        public virtual DbSet<InterestMst> InterestMsts { get; set; }
        public virtual DbSet<Interview_Details> Interview_Details { get; set; }
        public virtual DbSet<ItemLocation> ItemLocations { get; set; }
        public virtual DbSet<ItemsLeftbehind> ItemsLeftbehinds { get; set; }
        public virtual DbSet<KYADetail> KYADetails { get; set; }
        public virtual DbSet<LeaseRentPayment> LeaseRentPayments { get; set; }
        public virtual DbSet<LeaseRentPaymentTran> LeaseRentPaymentTrans { get; set; }
        public virtual DbSet<Letter_History> Letter_History { get; set; }
        public virtual DbSet<Letter_History_new> Letter_History_new { get; set; }
        public virtual DbSet<Letter_Signing_Authority> Letter_Signing_Authority { get; set; }
        public virtual DbSet<LocationChargeDetailMst> LocationChargeDetailMsts { get; set; }
        public virtual DbSet<LocationMst> LocationMsts { get; set; }
        public virtual DbSet<MapPhoneScriptResponse> MapPhoneScriptResponses { get; set; }
        public virtual DbSet<MapRoleMenu> MapRoleMenus { get; set; }
        public virtual DbSet<MapUserRole> MapUserRoles { get; set; }
        public virtual DbSet<MassReschedule> MassReschedules { get; set; }
        public virtual DbSet<MassRescheduleStatu> MassRescheduleStatus { get; set; }
        public virtual DbSet<MediaTypeMst> MediaTypeMsts { get; set; }
        public virtual DbSet<Menu> Menus { get; set; }
        public virtual DbSet<Merge_Property_Master> Merge_Property_Master { get; set; }
        public virtual DbSet<Merge_Property_Trans> Merge_Property_Trans { get; set; }
        public virtual DbSet<MortgageDetail> MortgageDetails { get; set; }
        public virtual DbSet<NDCDetailMst> NDCDetailMsts { get; set; }
        public virtual DbSet<NICsingalwindowSystem> NICsingalwindowSystems { get; set; }
        public virtual DbSet<NOC_MASTER> NOC_MASTER { get; set; }
        public virtual DbSet<Nominee_Details> Nominee_Details { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationMediaTran> NotificationMediaTrans { get; set; }
        public virtual DbSet<NotificationPaymentModeTran> NotificationPaymentModeTrans { get; set; }
        public virtual DbSet<Noting_File_Master> Noting_File_Master { get; set; }
        public virtual DbSet<Noting_File_Trans> Noting_File_Trans { get; set; }
        public virtual DbSet<OccupationMst> OccupationMsts { get; set; }
        public virtual DbSet<online_Director_Master> online_Director_Master { get; set; }
        public virtual DbSet<OnlineApplicationDetail> OnlineApplicationDetails { get; set; }
        public virtual DbSet<OnlineApplicationDetails_trans> OnlineApplicationDetails_trans { get; set; }
        public virtual DbSet<OnlineApplicationProcessDetail> OnlineApplicationProcessDetails { get; set; }
        public virtual DbSet<OnlineAreawithRegisandProcfee> OnlineAreawithRegisandProcfees { get; set; }
        public virtual DbSet<OnlineCheckListMaster> OnlineCheckListMasters { get; set; }
        public virtual DbSet<OnlineCheckLisTran> OnlineCheckLisTrans { get; set; }
        public virtual DbSet<OnlineSchemeDraw> OnlineSchemeDraws { get; set; }
        public virtual DbSet<PaymentDetailMaster> PaymentDetailMasters { get; set; }
        public virtual DbSet<PaymentDetailTran> PaymentDetailTrans { get; set; }
        public virtual DbSet<PaymentDuesCalculatedMst> PaymentDuesCalculatedMsts { get; set; }
        public virtual DbSet<PaymentLeaseRentMaster> PaymentLeaseRentMasters { get; set; }
        public virtual DbSet<PaymentLeaseRentTran> PaymentLeaseRentTrans { get; set; }
        public virtual DbSet<PaymentModeMst> PaymentModeMsts { get; set; }
        public virtual DbSet<PaymentReceiptMst> PaymentReceiptMsts { get; set; }
        public virtual DbSet<PaymentReceiptTran> PaymentReceiptTrans { get; set; }
        public virtual DbSet<PaymentScheduleMaster> PaymentScheduleMasters { get; set; }
        public virtual DbSet<PaymentScheduleTran> PaymentScheduleTrans { get; set; }
        public virtual DbSet<PaymentSubTypeMst> PaymentSubTypeMsts { get; set; }
        public virtual DbSet<PaymentTypeMst> PaymentTypeMsts { get; set; }
        public virtual DbSet<PhoneResponseType> PhoneResponseTypes { get; set; }
        public virtual DbSet<PhoneScript> PhoneScripts { get; set; }
        public virtual DbSet<PickupCallLog> PickupCallLogs { get; set; }
        public virtual DbSet<PickupCallStatu> PickupCallStatus { get; set; }
        public virtual DbSet<PickupDate> PickupDates { get; set; }
        public virtual DbSet<PickupPriority> PickupPriorities { get; set; }
        public virtual DbSet<PickupReminder> PickupReminders { get; set; }
        public virtual DbSet<PickupReminderHistory> PickupReminderHistories { get; set; }
        public virtual DbSet<PickupReminderStatu> PickupReminderStatus { get; set; }
        public virtual DbSet<PickupRouteType> PickupRouteTypes { get; set; }
        public virtual DbSet<PickupSchedule> PickupSchedules { get; set; }
        public virtual DbSet<PickupScheduleRoute> PickupScheduleRoutes { get; set; }
        public virtual DbSet<PossessionDetail> PossessionDetails { get; set; }
        public virtual DbSet<PRE_FULL_PAYMENT_NDC> PRE_FULL_PAYMENT_NDC { get; set; }
        public virtual DbSet<PRE_FULL_PAYMENT_NDC_NEW> PRE_FULL_PAYMENT_NDC_NEW { get; set; }
        public virtual DbSet<Process_Master> Process_Master { get; set; }
        public virtual DbSet<Product_Master> Product_Master { get; set; }
        public virtual DbSet<Property_Cancellation_Details> Property_Cancellation_Details { get; set; }
        public virtual DbSet<Property_Ledger> Property_Ledger { get; set; }
        public virtual DbSet<PropertyCompensationMst> PropertyCompensationMsts { get; set; }
        public virtual DbSet<PropertyLocationChargesTran> PropertyLocationChargesTrans { get; set; }
        public virtual DbSet<PropertyRateMst> PropertyRateMsts { get; set; }
        public virtual DbSet<PropertyTransaction> PropertyTransactions { get; set; }
        public virtual DbSet<PropertyTypeMst> PropertyTypeMsts { get; set; }
        public virtual DbSet<QuotaMst> QuotaMsts { get; set; }
        public virtual DbSet<RebateMst> RebateMsts { get; set; }
        public virtual DbSet<RECEIPT_AMOUNT_TRANS> RECEIPT_AMOUNT_TRANS { get; set; }
        public virtual DbSet<RECEIPT_DETAIL_MASTER> RECEIPT_DETAIL_MASTER { get; set; }
        public virtual DbSet<RECEIPT_SUB_HEAD> RECEIPT_SUB_HEAD { get; set; }
        public virtual DbSet<RECIEPT_HEAD> RECIEPT_HEAD { get; set; }
        public virtual DbSet<RedirectNumberFromPhone> RedirectNumberFromPhones { get; set; }
        public virtual DbSet<RegistryDetail> RegistryDetails { get; set; }
        public virtual DbSet<RelationshipType> RelationshipTypes { get; set; }
        public virtual DbSet<ReligionMst> ReligionMsts { get; set; }
        public virtual DbSet<RentPermissionDetail> RentPermissionDetails { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<RouteNameIngenuity> RouteNameIngenuities { get; set; }
        public virtual DbSet<SchemeBankTran> SchemeBankTrans { get; set; }
        public virtual DbSet<SchemeCostTran> SchemeCostTrans { get; set; }
        public virtual DbSet<SchemeDepartmentTran> SchemeDepartmentTrans { get; set; }
        public virtual DbSet<SchemeMst> SchemeMsts { get; set; }
        public virtual DbSet<SchemeNotifTran> SchemeNotifTrans { get; set; }
        public virtual DbSet<SchemePropTran> SchemePropTrans { get; set; }
        public virtual DbSet<SchemeQuotaTran> SchemeQuotaTrans { get; set; }
        public virtual DbSet<SchemeRebateTran> SchemeRebateTrans { get; set; }
        public virtual DbSet<SchemeRefundTran> SchemeRefundTrans { get; set; }
        public virtual DbSet<SchemeTypeMst> SchemeTypeMsts { get; set; }
        public virtual DbSet<SectorMst> SectorMsts { get; set; }
        public virtual DbSet<send_log> send_log { get; set; }
        public virtual DbSet<ServiceCheckList_Master> ServiceCheckList_Master { get; set; }
        public virtual DbSet<ServiceRequest_Documents> ServiceRequest_Documents { get; set; }
        public virtual DbSet<SigningOfficerMaster> SigningOfficerMasters { get; set; }
        public virtual DbSet<smsreport> smsreports { get; set; }
        public virtual DbSet<SMSServicesMst> SMSServicesMsts { get; set; }
        public virtual DbSet<StampDutyMaster> StampDutyMasters { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<StatusMaster> StatusMasters { get; set; }
        public virtual DbSet<SubDepartmentMst> SubDepartmentMsts { get; set; }
        public virtual DbSet<Succ_Mut_Trans> Succ_Mut_Trans { get; set; }
        public virtual DbSet<SycTable> SycTables { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TemplateMaster> TemplateMasters { get; set; }
        public virtual DbSet<Transfer_Type> Transfer_Type { get; set; }
        public virtual DbSet<UmApplicationMaster> UmApplicationMasters { get; set; }
        public virtual DbSet<UmDepartmentMaster> UmDepartmentMasters { get; set; }
        public virtual DbSet<UmMenuMaster> UmMenuMasters { get; set; }
        public virtual DbSet<UmRoleAppTran> UmRoleAppTrans { get; set; }
        public virtual DbSet<UmRoleMaster> UmRoleMasters { get; set; }
        public virtual DbSet<UmRoleMasterTran> UmRoleMasterTrans { get; set; }
        public virtual DbSet<UmUserDepartmentTran> UmUserDepartmentTrans { get; set; }
        public virtual DbSet<UmUserMaster> UmUserMasters { get; set; }
        public virtual DbSet<UmUserMasterRole> UmUserMasterRoles { get; set; }
        public virtual DbSet<UmUserSubDepartmentTran> UmUserSubDepartmentTrans { get; set; }
        public virtual DbSet<UnsuccessfulApplicantListMaster> UnsuccessfulApplicantListMasters { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserStatu> UserStatus { get; set; }
        public virtual DbSet<ValidatedPropertyDetailMst> ValidatedPropertyDetailMsts { get; set; }
        public virtual DbSet<WebSiteDonation> WebSiteDonations { get; set; }
        public virtual DbSet<AggregatedCounter> AggregatedCounters { get; set; }
        public virtual DbSet<Hash> Hashes { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobParameter> JobParameters { get; set; }
        public virtual DbSet<JobQueue> JobQueues { get; set; }
        public virtual DbSet<List> Lists { get; set; }
        public virtual DbSet<Schema> Schemata { get; set; }
        public virtual DbSet<Server> Servers { get; set; }
        public virtual DbSet<Set> Sets { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<NiveshMitraEntr_Master> NiveshMitraEntr_Master { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceStatu> ServiceStatus { get; set; }
        public virtual DbSet<ServiceStatusTran> ServiceStatusTrans { get; set; }
        public virtual DbSet<ServiceTran> ServiceTrans { get; set; }
        public virtual DbSet<AllotmentMaster_log> AllotmentMaster_log { get; set; }
        public virtual DbSet<AllotmentMaster_temp> AllotmentMaster_temp { get; set; }
        public virtual DbSet<ApplicationDetails_log> ApplicationDetails_log { get; set; }
        public virtual DbSet<AuditAcceptableItem> AuditAcceptableItems { get; set; }
        public virtual DbSet<AuditBBBSContactInformation> AuditBBBSContactInformations { get; set; }
        public virtual DbSet<AuditBBBSLocation> AuditBBBSLocations { get; set; }
        public virtual DbSet<AuditBinFeeType> AuditBinFeeTypes { get; set; }
        public virtual DbSet<AuditBinPartnershipLocation> AuditBinPartnershipLocations { get; set; }
        public virtual DbSet<AuditContact> AuditContacts { get; set; }
        public virtual DbSet<AuditDonateDestination> AuditDonateDestinations { get; set; }
        public virtual DbSet<AuditDriver> AuditDrivers { get; set; }
        public virtual DbSet<AuditDriverType> AuditDriverTypes { get; set; }
        public virtual DbSet<AuditItemLocation> AuditItemLocations { get; set; }
        public virtual DbSet<AuditNotification> AuditNotifications { get; set; }
        public virtual DbSet<AuditPickupRouteType> AuditPickupRouteTypes { get; set; }
        public virtual DbSet<AuditRelationshipType> AuditRelationshipTypes { get; set; }
        public virtual DbSet<back_ApplicationDetails> back_ApplicationDetails { get; set; }
        public virtual DbSet<back_SchemePropTrans> back_SchemePropTrans { get; set; }
        public virtual DbSet<back_SectorMst> back_SectorMst { get; set; }
        public virtual DbSet<Customer_ServiceRequest_back> Customer_ServiceRequest_back { get; set; }
        public virtual DbSet<Customer_ServiceRequest_back2> Customer_ServiceRequest_back2 { get; set; }
        public virtual DbSet<Customer_ServiceRequestback> Customer_ServiceRequestback { get; set; }
        public virtual DbSet<Defaulterleaszero> Defaulterleaszeroes { get; set; }
        public virtual DbSet<DonationSchedule> DonationSchedules { get; set; }
        public virtual DbSet<IngenuityErrorDataBkp> IngenuityErrorDataBkps { get; set; }
        public virtual DbSet<LeaseRentPayment_Old> LeaseRentPayment_Old { get; set; }
        public virtual DbSet<MenuBkp> MenuBkps { get; set; }
        public virtual DbSet<OnlineApplicationDetails_trans_BACK> OnlineApplicationDetails_trans_BACK { get; set; }
        public virtual DbSet<OnlineApplicationDetails_trans_BACK1> OnlineApplicationDetails_trans_BACK1 { get; set; }
        public virtual DbSet<PRE_FULL_PAYMENT_NDC_back> PRE_FULL_PAYMENT_NDC_back { get; set; }
        public virtual DbSet<PRE_PROP_HIRE_PURCHASE> PRE_PROP_HIRE_PURCHASE { get; set; }
        public virtual DbSet<print_challan> print_challan { get; set; }
        public virtual DbSet<Project_report> Project_report { get; set; }
        public virtual DbSet<RECEIPTBEFORE2009> RECEIPTBEFORE2009 { get; set; }
        public virtual DbSet<Report_Template_temp> Report_Template_temp { get; set; }
        public virtual DbSet<Report_Template_temp_new> Report_Template_temp_new { get; set; }
        public virtual DbSet<RePrint_Challan> RePrint_Challan { get; set; }
        public virtual DbSet<SchemePropTrans_log> SchemePropTrans_log { get; set; }
        public virtual DbSet<SignedDoc> SignedDocs { get; set; }
        public virtual DbSet<table_inst> table_inst { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<temp> temps { get; set; }
        public virtual DbSet<temp_21> temp_21 { get; set; }
        public virtual DbSet<temp_cal> temp_cal { get; set; }
        public virtual DbSet<temp_housing> temp_housing { get; set; }
        public virtual DbSet<temp1> temp1 { get; set; }
        public virtual DbSet<tep_inst> tep_inst { get; set; }
        public virtual DbSet<test_14> test_14 { get; set; }
        public virtual DbSet<test_1pay> test_1pay { get; set; }
        public virtual DbSet<test_data> test_data { get; set; }
        public virtual DbSet<TEST_VIEW> TEST_VIEW { get; set; }
        public virtual DbSet<TjskServidept> TjskServidepts { get; set; }
        public virtual DbSet<TonlineServidept> TonlineServidepts { get; set; }
        public virtual DbSet<UmUserSerialMaster> UmUserSerialMasters { get; set; }
        public virtual DbSet<Village_Master> Village_Master { get; set; }
        public virtual DbSet<Counter> Counters { get; set; }
        public virtual DbSet<AmountPaid> AmountPaids { get; set; }
        public virtual DbSet<Applicationresult> Applicationresults { get; set; }
        public virtual DbSet<bakdetail_119119scheme> bakdetail_119119scheme { get; set; }
        public virtual DbSet<data_test> data_test { get; set; }
        public virtual DbSet<Date_View> Date_View { get; set; }
        public virtual DbSet<housing> housings { get; set; }
        public virtual DbSet<ind162162> ind162162 { get; set; }
        public virtual DbSet<IndSchemeid> IndSchemeids { get; set; }
        public virtual DbSet<Industrial> Industrials { get; set; }
        public virtual DbSet<Instutional> Instutionals { get; set; }
        public virtual DbSet<oldscheme> oldschemes { get; set; }
        public virtual DbSet<test1> test1 { get; set; }
        public virtual DbSet<VecantPropertyList> VecantPropertyLists { get; set; }
        public virtual DbSet<View_1> View_1 { get; set; }
        public virtual DbSet<View_2> View_2 { get; set; }
        public virtual DbSet<view_approval_pending_request> view_approval_pending_request { get; set; }
        public virtual DbSet<View_Service_report> View_Service_report { get; set; }
        public virtual DbSet<View_Transfer_Charges_Check> View_Transfer_Charges_Check { get; set; }
        public virtual DbSet<ViewAllotmentMoneyCheck> ViewAllotmentMoneyChecks { get; set; }
        public virtual DbSet<ViewAllPropertyDetail> ViewAllPropertyDetails { get; set; }
        public virtual DbSet<ViewAllUserApplicationRoleDetail> ViewAllUserApplicationRoleDetails { get; set; }
        public virtual DbSet<ViewApplicationMenuMaster> ViewApplicationMenuMasters { get; set; }
        public virtual DbSet<viewInstutionalPBalance> viewInstutionalPBalances { get; set; }
        public virtual DbSet<ViewLeaseRentCheck> ViewLeaseRentChecks { get; set; }
        public virtual DbSet<ViewLeaseRentPayment> ViewLeaseRentPayments { get; set; }
        public virtual DbSet<ViewReceiptMaster> ViewReceiptMasters { get; set; }
        public virtual DbSet<ViewReceiptMaster_old> ViewReceiptMaster_old { get; set; }
        public virtual DbSet<ViewRoleWiseApplication> ViewRoleWiseApplications { get; set; }
        public virtual DbSet<ViewUmUserMaster> ViewUmUserMasters { get; set; }
    
        [DbFunction("NoidaMigrationEntities", "fn_CountWeekDays")]
        public virtual IQueryable<fn_CountWeekDays_Result> fn_CountWeekDays(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_CountWeekDays_Result>("[NoidaMigrationEntities].[fn_CountWeekDays](@fromdate, @todate)", fromdateParameter, todateParameter);
        }
    
        [DbFunction("NoidaMigrationEntities", "FUNC_SplitIDs")]
        public virtual IQueryable<FUNC_SplitIDs_Result> FUNC_SplitIDs(string ids)
        {
            var idsParameter = ids != null ?
                new ObjectParameter("Ids", ids) :
                new ObjectParameter("Ids", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FUNC_SplitIDs_Result>("[NoidaMigrationEntities].[FUNC_SplitIDs](@Ids)", idsParameter);
        }
    
        [DbFunction("NoidaMigrationEntities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[NoidaMigrationEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual ObjectResult<string> usp_getCitizenGraph(Nullable<int> reqType, Nullable<int> userdep)
        {
            var reqTypeParameter = reqType.HasValue ?
                new ObjectParameter("reqType", reqType) :
                new ObjectParameter("reqType", typeof(int));
    
            var userdepParameter = userdep.HasValue ?
                new ObjectParameter("userdep", userdep) :
                new ObjectParameter("userdep", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("usp_getCitizenGraph", reqTypeParameter, userdepParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceCIC_Result> usp_GetServiceCIC(Nullable<int> serviceReqid)
        {
            var serviceReqidParameter = serviceReqid.HasValue ?
                new ObjectParameter("ServiceReqid", serviceReqid) :
                new ObjectParameter("ServiceReqid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceCIC_Result>("usp_GetServiceCIC", serviceReqidParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceExtensionFunction_Result> usp_GetServiceExtensionFunction(Nullable<int> serviceReqid)
        {
            var serviceReqidParameter = serviceReqid.HasValue ?
                new ObjectParameter("ServiceReqid", serviceReqid) :
                new ObjectParameter("ServiceReqid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceExtensionFunction_Result>("usp_GetServiceExtensionFunction", serviceReqidParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceGPA_Result> usp_GetServiceGPA(Nullable<int> serviceReqid)
        {
            var serviceReqidParameter = serviceReqid.HasValue ?
                new ObjectParameter("ServiceReqid", serviceReqid) :
                new ObjectParameter("ServiceReqid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceGPA_Result>("usp_GetServiceGPA", serviceReqidParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceMortgage_Result> usp_GetServiceMortgage(Nullable<int> serviceReqid)
        {
            var serviceReqidParameter = serviceReqid.HasValue ?
                new ObjectParameter("ServiceReqid", serviceReqid) :
                new ObjectParameter("ServiceReqid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceMortgage_Result>("usp_GetServiceMortgage", serviceReqidParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceMutation_Result> usp_GetServiceMutation(Nullable<int> serviceReqid)
        {
            var serviceReqidParameter = serviceReqid.HasValue ?
                new ObjectParameter("ServiceReqid", serviceReqid) :
                new ObjectParameter("ServiceReqid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceMutation_Result>("usp_GetServiceMutation", serviceReqidParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceRent_Result> usp_GetServiceRent(Nullable<int> serviceReqid)
        {
            var serviceReqidParameter = serviceReqid.HasValue ?
                new ObjectParameter("ServiceReqid", serviceReqid) :
                new ObjectParameter("ServiceReqid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceRent_Result>("usp_GetServiceRent", serviceReqidParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceRequestDetails_Result> usp_GetServiceRequestDetails(Nullable<int> serviceReqid)
        {
            var serviceReqidParameter = serviceReqid.HasValue ?
                new ObjectParameter("ServiceReqid", serviceReqid) :
                new ObjectParameter("ServiceReqid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceRequestDetails_Result>("usp_GetServiceRequestDetails", serviceReqidParameter);
        }
    
        public virtual int usp_GetServiceRequestMatrix(Nullable<int> ndepId, Nullable<int> nservId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var ndepIdParameter = ndepId.HasValue ?
                new ObjectParameter("ndepId", ndepId) :
                new ObjectParameter("ndepId", typeof(int));
    
            var nservIdParameter = nservId.HasValue ?
                new ObjectParameter("nservId", nservId) :
                new ObjectParameter("nservId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetServiceRequestMatrix", ndepIdParameter, nservIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<usp_GetServiceTransfer_Result> usp_GetServiceTransfer(Nullable<int> serviceReqid)
        {
            var serviceReqidParameter = serviceReqid.HasValue ?
                new ObjectParameter("ServiceReqid", serviceReqid) :
                new ObjectParameter("ServiceReqid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetServiceTransfer_Result>("usp_GetServiceTransfer", serviceReqidParameter);
        }
    
        public virtual int AddReceipt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddReceipt");
        }
    
        public virtual int AllotmentMoneyDue(Nullable<int> rid)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("Rid", rid) :
                new ObjectParameter("Rid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AllotmentMoneyDue", ridParameter);
        }
    
        public virtual int AllotmentMoneyDueOld(Nullable<int> rid)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("Rid", rid) :
                new ObjectParameter("Rid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AllotmentMoneyDueOld", ridParameter);
        }
    
        public virtual int LoadDonationDataFromStagingData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadDonationDataFromStagingData");
        }
    
        public virtual int LoadDonorAddressDataFromStagingData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadDonorAddressDataFromStagingData");
        }
    
        public virtual int LoadDonorDataFromStagingData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadDonorDataFromStagingData");
        }
    
        public virtual int LoadItemLocationDataFromStagingData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadItemLocationDataFromStagingData");
        }
    
        public virtual int LoadPickupScheduleFromStagingData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadPickupScheduleFromStagingData");
        }
    
        public virtual int LoadRouteDataFromStagingData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoadRouteDataFromStagingData");
        }
    
        public virtual int pr_SendSmsSQL(string mobileNo, string smstext, ObjectParameter sResponse)
        {
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var smstextParameter = smstext != null ?
                new ObjectParameter("smstext", smstext) :
                new ObjectParameter("smstext", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pr_SendSmsSQL", mobileNoParameter, smstextParameter, sResponse);
        }
    
        public virtual int RefreshStagingDataFromStagingbackup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RefreshStagingDataFromStagingbackup");
        }
    
        public virtual int rsp__bulkduesupdate_dept_wise(Nullable<int> duestype, Nullable<System.DateTime> dueuptodate, Nullable<int> deptid)
        {
            var duestypeParameter = duestype.HasValue ?
                new ObjectParameter("duestype", duestype) :
                new ObjectParameter("duestype", typeof(int));
    
            var dueuptodateParameter = dueuptodate.HasValue ?
                new ObjectParameter("dueuptodate", dueuptodate) :
                new ObjectParameter("dueuptodate", typeof(System.DateTime));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("deptid", deptid) :
                new ObjectParameter("deptid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rsp__bulkduesupdate_dept_wise", duestypeParameter, dueuptodateParameter, deptidParameter);
        }
    
        public virtual int rsp_bulkduesupdate_dept_wise_tvp_manual(Nullable<System.DateTime> dueuptodate, Nullable<int> deptid)
        {
            var dueuptodateParameter = dueuptodate.HasValue ?
                new ObjectParameter("dueuptodate", dueuptodate) :
                new ObjectParameter("dueuptodate", typeof(System.DateTime));
    
            var deptidParameter = deptid.HasValue ?
                new ObjectParameter("deptid", deptid) :
                new ObjectParameter("deptid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rsp_bulkduesupdate_dept_wise_tvp_manual", dueuptodateParameter, deptidParameter);
        }
    
        public virtual ObjectResult<rsp_dashboard_get_kya_sub_report_Result> rsp_dashboard_get_kya_sub_report(Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string filterType)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rsp_dashboard_get_kya_sub_report_Result>("rsp_dashboard_get_kya_sub_report", departmentIdParameter, startDateParameter, endDateParameter, filterTypeParameter);
        }
    
        public virtual ObjectResult<rsp_dues_report_dept_wise_ssrs_Result> rsp_dues_report_dept_wise_ssrs(Nullable<int> dept_id, Nullable<int> reportTypeId)
        {
            var dept_idParameter = dept_id.HasValue ?
                new ObjectParameter("dept_id", dept_id) :
                new ObjectParameter("dept_id", typeof(int));
    
            var reportTypeIdParameter = reportTypeId.HasValue ?
                new ObjectParameter("reportTypeId", reportTypeId) :
                new ObjectParameter("reportTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rsp_dues_report_dept_wise_ssrs_Result>("rsp_dues_report_dept_wise_ssrs", dept_idParameter, reportTypeIdParameter);
        }
    
        public virtual int Sp_AccountReport(string fY, Nullable<int> departmentId)
        {
            var fYParameter = fY != null ?
                new ObjectParameter("fY", fY) :
                new ObjectParameter("fY", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AccountReport", fYParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<Sp_AccountReport_list_Result> Sp_AccountReport_list(string fY, Nullable<int> departmentId)
        {
            var fYParameter = fY != null ?
                new ObjectParameter("fY", fY) :
                new ObjectParameter("fY", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AccountReport_list_Result>("Sp_AccountReport_list", fYParameter, departmentIdParameter);
        }
    
        public virtual ObjectResult<Sp_AccountReport_Receipt_list_Result> Sp_AccountReport_Receipt_list(string fY, Nullable<int> departmentId, string headiD)
        {
            var fYParameter = fY != null ?
                new ObjectParameter("fY", fY) :
                new ObjectParameter("fY", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var headiDParameter = headiD != null ?
                new ObjectParameter("headiD", headiD) :
                new ObjectParameter("headiD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_AccountReport_Receipt_list_Result>("Sp_AccountReport_Receipt_list", fYParameter, departmentIdParameter, headiDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_AmalgamateProperties(string rid, Nullable<decimal> charges, Nullable<int> status, Nullable<int> assignedTo, Nullable<int> type, Nullable<int> requestNo, string comment)
        {
            var ridParameter = rid != null ?
                new ObjectParameter("Rid", rid) :
                new ObjectParameter("Rid", typeof(string));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("Charges", charges) :
                new ObjectParameter("Charges", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var requestNoParameter = requestNo.HasValue ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_AmalgamateProperties", ridParameter, chargesParameter, statusParameter, assignedToParameter, typeParameter, requestNoParameter, commentParameter);
        }
    
        public virtual int Sp_AmalgamateProperties_new(string rid, Nullable<decimal> charges, Nullable<int> status, Nullable<int> assignedTo, Nullable<int> type, Nullable<int> requestNo, string comment)
        {
            var ridParameter = rid != null ?
                new ObjectParameter("Rid", rid) :
                new ObjectParameter("Rid", typeof(string));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("Charges", charges) :
                new ObjectParameter("Charges", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var requestNoParameter = requestNo.HasValue ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AmalgamateProperties_new", ridParameter, chargesParameter, statusParameter, assignedToParameter, typeParameter, requestNoParameter, commentParameter);
        }
    
        public virtual ObjectResult<sp_ChallanServicesGraph_Result> sp_ChallanServicesGraph(string department, string bankName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string reportFlag)
        {
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var reportFlagParameter = reportFlag != null ?
                new ObjectParameter("ReportFlag", reportFlag) :
                new ObjectParameter("ReportFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ChallanServicesGraph_Result>("sp_ChallanServicesGraph", departmentParameter, bankNameParameter, startDateParameter, endDateParameter, reportFlagParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<Sp_DashboardPropertyData_Result> Sp_DashboardPropertyData(Nullable<int> deptId)
        {
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_DashboardPropertyData_Result>("Sp_DashboardPropertyData", deptIdParameter);
        }
    
        public virtual int Sp_DeAmalgamateProperties(string childRid, Nullable<int> parentRid, Nullable<decimal> charges, Nullable<int> status, Nullable<int> assignedTo, Nullable<int> type, Nullable<int> requestNo, string comment)
        {
            var childRidParameter = childRid != null ?
                new ObjectParameter("ChildRid", childRid) :
                new ObjectParameter("ChildRid", typeof(string));
    
            var parentRidParameter = parentRid.HasValue ?
                new ObjectParameter("ParentRid", parentRid) :
                new ObjectParameter("ParentRid", typeof(int));
    
            var chargesParameter = charges.HasValue ?
                new ObjectParameter("Charges", charges) :
                new ObjectParameter("Charges", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var assignedToParameter = assignedTo.HasValue ?
                new ObjectParameter("AssignedTo", assignedTo) :
                new ObjectParameter("AssignedTo", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var requestNoParameter = requestNo.HasValue ?
                new ObjectParameter("RequestNo", requestNo) :
                new ObjectParameter("RequestNo", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DeAmalgamateProperties", childRidParameter, parentRidParameter, chargesParameter, statusParameter, assignedToParameter, typeParameter, requestNoParameter, commentParameter);
        }
    
        public virtual int SP_DEPARTMENTWISEPROPERTYSERVICES(Nullable<int> dEPARTMENTID, Nullable<int> pARAMETER, Nullable<int> tYPE)
        {
            var dEPARTMENTIDParameter = dEPARTMENTID.HasValue ?
                new ObjectParameter("DEPARTMENTID", dEPARTMENTID) :
                new ObjectParameter("DEPARTMENTID", typeof(int));
    
            var pARAMETERParameter = pARAMETER.HasValue ?
                new ObjectParameter("PARAMETER", pARAMETER) :
                new ObjectParameter("PARAMETER", typeof(int));
    
            var tYPEParameter = tYPE.HasValue ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DEPARTMENTWISEPROPERTYSERVICES", dEPARTMENTIDParameter, pARAMETERParameter, tYPEParameter);
        }
    
        public virtual int SP_DEPARTMENTWISEPROPERTYSERVICES_Record(Nullable<int> dEPARTMENT_ID, Nullable<int> pARAMETER, Nullable<int> tYPE)
        {
            var dEPARTMENT_IDParameter = dEPARTMENT_ID.HasValue ?
                new ObjectParameter("DEPARTMENT_ID", dEPARTMENT_ID) :
                new ObjectParameter("DEPARTMENT_ID", typeof(int));
    
            var pARAMETERParameter = pARAMETER.HasValue ?
                new ObjectParameter("PARAMETER", pARAMETER) :
                new ObjectParameter("PARAMETER", typeof(int));
    
            var tYPEParameter = tYPE.HasValue ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DEPARTMENTWISEPROPERTYSERVICES_Record", dEPARTMENT_IDParameter, pARAMETERParameter, tYPEParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int Sp_DuesCalculationHistory(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DuesCalculationHistory", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_DuesCalculationHistory_default(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DuesCalculationHistory_default", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_DuesCalculationHistory_lease(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DuesCalculationHistory_lease", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_DuesCalculationHistory_new(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DuesCalculationHistory_new", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_DuesCalculationHistory_old(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DuesCalculationHistory_old", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_DuesCalculationHistory_only(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DuesCalculationHistory_only", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_DuesCalculationHistorynew(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DuesCalculationHistorynew", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sp_DuesCalculationTillDate(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sp_DuesCalculationTillDate", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sp_DuesCalculationTillDate_1(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sp_DuesCalculationTillDate_1", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_DuesCalculationTillDate_20june2018(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_DuesCalculationTillDate_20june2018", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual ObjectResult<Sp_DuesCalculationTillDate_New_Result> Sp_DuesCalculationTillDate_New(string rID, Nullable<System.DateTime> c, Nullable<int> lANDUSETYPE)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("C", c) :
                new ObjectParameter("C", typeof(System.DateTime));
    
            var lANDUSETYPEParameter = lANDUSETYPE.HasValue ?
                new ObjectParameter("LANDUSETYPE", lANDUSETYPE) :
                new ObjectParameter("LANDUSETYPE", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_DuesCalculationTillDate_New_Result>("Sp_DuesCalculationTillDate_New", rIDParameter, cParameter, lANDUSETYPEParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> Sp_DuesCalculationTillDate_Other(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("Sp_DuesCalculationTillDate_Other", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual ObjectResult<Sp_Get_ExtensionDetailByRID_Result> Sp_Get_ExtensionDetailByRID(Nullable<int> rID)
        {
            var rIDParameter = rID.HasValue ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Get_ExtensionDetailByRID_Result>("Sp_Get_ExtensionDetailByRID", rIDParameter);
        }
    
        public virtual ObjectResult<Sp_GetDepartmentRequestCountTimeLine_Result> Sp_GetDepartmentRequestCountTimeLine(Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> type, string requestThrough)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var requestThroughParameter = requestThrough != null ?
                new ObjectParameter("RequestThrough", requestThrough) :
                new ObjectParameter("RequestThrough", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetDepartmentRequestCountTimeLine_Result>("Sp_GetDepartmentRequestCountTimeLine", departmentIdParameter, startDateParameter, endDateParameter, typeParameter, requestThroughParameter);
        }
    
        public virtual ObjectResult<Sp_GetDepartmentRequestCountTimeLineTest_Result> Sp_GetDepartmentRequestCountTimeLineTest(Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> type, string requestThrough)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var requestThroughParameter = requestThrough != null ?
                new ObjectParameter("RequestThrough", requestThrough) :
                new ObjectParameter("RequestThrough", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetDepartmentRequestCountTimeLineTest_Result>("Sp_GetDepartmentRequestCountTimeLineTest", departmentIdParameter, startDateParameter, endDateParameter, typeParameter, requestThroughParameter);
        }
    
        public virtual ObjectResult<SP_GetListedPropertyCount_Result> SP_GetListedPropertyCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetListedPropertyCount_Result>("SP_GetListedPropertyCount");
        }
    
        public virtual ObjectResult<Sp_GetListValueByTotalCount_Result> Sp_GetListValueByTotalCount(Nullable<int> departmentId, Nullable<int> reportTypeId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var reportTypeIdParameter = reportTypeId.HasValue ?
                new ObjectParameter("reportTypeId", reportTypeId) :
                new ObjectParameter("reportTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetListValueByTotalCount_Result>("Sp_GetListValueByTotalCount", departmentIdParameter, reportTypeIdParameter);
        }
    
        public virtual int sp_GetPropertyGraph(Nullable<int> properyTypeId, string sectorId, string block, string propertyNo, string reportFlag)
        {
            var properyTypeIdParameter = properyTypeId.HasValue ?
                new ObjectParameter("ProperyTypeId", properyTypeId) :
                new ObjectParameter("ProperyTypeId", typeof(int));
    
            var sectorIdParameter = sectorId != null ?
                new ObjectParameter("SectorId", sectorId) :
                new ObjectParameter("SectorId", typeof(string));
    
            var blockParameter = block != null ?
                new ObjectParameter("Block", block) :
                new ObjectParameter("Block", typeof(string));
    
            var propertyNoParameter = propertyNo != null ?
                new ObjectParameter("propertyNo", propertyNo) :
                new ObjectParameter("propertyNo", typeof(string));
    
            var reportFlagParameter = reportFlag != null ?
                new ObjectParameter("ReportFlag", reportFlag) :
                new ObjectParameter("ReportFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetPropertyGraph", properyTypeIdParameter, sectorIdParameter, blockParameter, propertyNoParameter, reportFlagParameter);
        }
    
        public virtual ObjectResult<Sp_GetServiceDetailsByServiceId_Result> Sp_GetServiceDetailsByServiceId(Nullable<int> serviceId, Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> type, string requestThrough)
        {
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var requestThroughParameter = requestThrough != null ?
                new ObjectParameter("RequestThrough", requestThrough) :
                new ObjectParameter("RequestThrough", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_GetServiceDetailsByServiceId_Result>("Sp_GetServiceDetailsByServiceId", serviceIdParameter, departmentIdParameter, startDateParameter, endDateParameter, typeParameter, requestThroughParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int Sp_InstallmentDuesCalculation(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_InstallmentDuesCalculation", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual ObjectResult<SP_KYADashboardGraph_Result> SP_KYADashboardGraph(Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string filterType)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_KYADashboardGraph_Result>("SP_KYADashboardGraph", departmentIdParameter, startDateParameter, endDateParameter, filterTypeParameter);
        }
    
        public virtual int SP_KYAReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_KYAReport");
        }
    
        public virtual int Sp_LatterPrintTemp(string registrationId, Nullable<int> templateId, Nullable<int> departmentId, string userId, Nullable<System.DateTime> letterDate, ObjectParameter commaString)
        {
            var registrationIdParameter = registrationId != null ?
                new ObjectParameter("registrationId", registrationId) :
                new ObjectParameter("registrationId", typeof(string));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("templateId", templateId) :
                new ObjectParameter("templateId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var letterDateParameter = letterDate.HasValue ?
                new ObjectParameter("letterDate", letterDate) :
                new ObjectParameter("letterDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LatterPrintTemp", registrationIdParameter, templateIdParameter, departmentIdParameter, userIdParameter, letterDateParameter, commaString);
        }
    
        public virtual ObjectResult<string> Sp_LatterPrintTemp_Forchallan(string challan_id, Nullable<int> templateId, Nullable<int> departmentId, string userId, Nullable<System.DateTime> letterDate, ObjectParameter commaString)
        {
            var challan_idParameter = challan_id != null ?
                new ObjectParameter("challan_id", challan_id) :
                new ObjectParameter("challan_id", typeof(string));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("templateId", templateId) :
                new ObjectParameter("templateId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var letterDateParameter = letterDate.HasValue ?
                new ObjectParameter("letterDate", letterDate) :
                new ObjectParameter("letterDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Sp_LatterPrintTemp_Forchallan", challan_idParameter, templateIdParameter, departmentIdParameter, userIdParameter, letterDateParameter, commaString);
        }
    
        public virtual int Sp_LatterPrintTemp_new(string registrationId, Nullable<int> templateId, Nullable<int> departmentId, string userId, Nullable<System.DateTime> letterDate, ObjectParameter commaString)
        {
            var registrationIdParameter = registrationId != null ?
                new ObjectParameter("registrationId", registrationId) :
                new ObjectParameter("registrationId", typeof(string));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("templateId", templateId) :
                new ObjectParameter("templateId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var letterDateParameter = letterDate.HasValue ?
                new ObjectParameter("letterDate", letterDate) :
                new ObjectParameter("letterDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LatterPrintTemp_new", registrationIdParameter, templateIdParameter, departmentIdParameter, userIdParameter, letterDateParameter, commaString);
        }
    
        public virtual int Sp_LeaseRentDemand(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype, ObjectParameter duesNext)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDemand", rIDParameter, cParameter, landusetypeParameter, duesNext);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationByDate(string registrationId, Nullable<System.DateTime> duesTillDate, Nullable<int> departmentId)
        {
            var registrationIdParameter = registrationId != null ?
                new ObjectParameter("RegistrationId", registrationId) :
                new ObjectParameter("RegistrationId", typeof(string));
    
            var duesTillDateParameter = duesTillDate.HasValue ?
                new ObjectParameter("DuesTillDate", duesTillDate) :
                new ObjectParameter("DuesTillDate", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationByDate", registrationIdParameter, duesTillDateParameter, departmentIdParameter);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationTillDate(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationTillDate", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationTillDate_defaulter(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationTillDate_defaulter", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationTillDate_leatest(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationTillDate_leatest", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationTillDate_new(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationTillDate_new", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationTillDate_OLD(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationTillDate_OLD", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationTillDate_old1(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationTillDate_old1", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationTillDate_Test(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationTillDate_Test", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_LeaseRentDuesCalculationTillDate1(string rID, Nullable<System.DateTime> c, Nullable<int> landusetype)
        {
            var rIDParameter = rID != null ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(string));
    
            var cParameter = c.HasValue ?
                new ObjectParameter("c", c) :
                new ObjectParameter("c", typeof(System.DateTime));
    
            var landusetypeParameter = landusetype.HasValue ?
                new ObjectParameter("landusetype", landusetype) :
                new ObjectParameter("landusetype", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_LeaseRentDuesCalculationTillDate1", rIDParameter, cParameter, landusetypeParameter);
        }
    
        public virtual int Sp_ManageaccountDetailDepartmentwise(Nullable<int> departmentId, Nullable<int> type)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ManageaccountDetailDepartmentwise", departmentIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_ManageDuuesDetailDepartmentwise(Nullable<System.DateTime> date, Nullable<int> departmentId, Nullable<int> type)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_ManageDuuesDetailDepartmentwise", dateParameter, departmentIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<Sp_ManageDuuesDetailDeptwise_Gaurav_Result> Sp_ManageDuuesDetailDeptwise_Gaurav(string date, Nullable<int> departmentId, Nullable<int> type)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ManageDuuesDetailDeptwise_Gaurav_Result>("Sp_ManageDuuesDetailDeptwise_Gaurav", dateParameter, departmentIdParameter, typeParameter);
        }
    
        public virtual int Sp_NewPaymentSchedule(Nullable<int> rid)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_NewPaymentSchedule", ridParameter);
        }
    
        public virtual int Sp_NewPaymentSchedule_OutSide(Nullable<int> rid, Nullable<decimal> principalAmount, Nullable<int> noOfInstallments, Nullable<int> frequencyOfInstallment, Nullable<System.DateTime> instalmentStartDate, Nullable<decimal> normalInterest, Nullable<decimal> penalInterest)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var principalAmountParameter = principalAmount.HasValue ?
                new ObjectParameter("PrincipalAmount", principalAmount) :
                new ObjectParameter("PrincipalAmount", typeof(decimal));
    
            var noOfInstallmentsParameter = noOfInstallments.HasValue ?
                new ObjectParameter("noOfInstallments", noOfInstallments) :
                new ObjectParameter("noOfInstallments", typeof(int));
    
            var frequencyOfInstallmentParameter = frequencyOfInstallment.HasValue ?
                new ObjectParameter("FrequencyOfInstallment", frequencyOfInstallment) :
                new ObjectParameter("FrequencyOfInstallment", typeof(int));
    
            var instalmentStartDateParameter = instalmentStartDate.HasValue ?
                new ObjectParameter("instalmentStartDate", instalmentStartDate) :
                new ObjectParameter("instalmentStartDate", typeof(System.DateTime));
    
            var normalInterestParameter = normalInterest.HasValue ?
                new ObjectParameter("NormalInterest", normalInterest) :
                new ObjectParameter("NormalInterest", typeof(decimal));
    
            var penalInterestParameter = penalInterest.HasValue ?
                new ObjectParameter("PenalInterest", penalInterest) :
                new ObjectParameter("PenalInterest", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_NewPaymentSchedule_OutSide", ridParameter, principalAmountParameter, noOfInstallmentsParameter, frequencyOfInstallmentParameter, instalmentStartDateParameter, normalInterestParameter, penalInterestParameter);
        }
    
        public virtual int Sp_NewPaymentSchedule_OutSide_new(Nullable<int> rid, Nullable<decimal> principalAmount, Nullable<int> noOfInstallments, Nullable<int> frequencyOfInstallment, Nullable<System.DateTime> instalmentStartDate, Nullable<decimal> normalInterest, Nullable<decimal> penalInterest, string scheduleType)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var principalAmountParameter = principalAmount.HasValue ?
                new ObjectParameter("PrincipalAmount", principalAmount) :
                new ObjectParameter("PrincipalAmount", typeof(decimal));
    
            var noOfInstallmentsParameter = noOfInstallments.HasValue ?
                new ObjectParameter("noOfInstallments", noOfInstallments) :
                new ObjectParameter("noOfInstallments", typeof(int));
    
            var frequencyOfInstallmentParameter = frequencyOfInstallment.HasValue ?
                new ObjectParameter("FrequencyOfInstallment", frequencyOfInstallment) :
                new ObjectParameter("FrequencyOfInstallment", typeof(int));
    
            var instalmentStartDateParameter = instalmentStartDate.HasValue ?
                new ObjectParameter("instalmentStartDate", instalmentStartDate) :
                new ObjectParameter("instalmentStartDate", typeof(System.DateTime));
    
            var normalInterestParameter = normalInterest.HasValue ?
                new ObjectParameter("NormalInterest", normalInterest) :
                new ObjectParameter("NormalInterest", typeof(decimal));
    
            var penalInterestParameter = penalInterest.HasValue ?
                new ObjectParameter("PenalInterest", penalInterest) :
                new ObjectParameter("PenalInterest", typeof(decimal));
    
            var scheduleTypeParameter = scheduleType != null ?
                new ObjectParameter("ScheduleType", scheduleType) :
                new ObjectParameter("ScheduleType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_NewPaymentSchedule_OutSide_new", ridParameter, principalAmountParameter, noOfInstallmentsParameter, frequencyOfInstallmentParameter, instalmentStartDateParameter, normalInterestParameter, penalInterestParameter, scheduleTypeParameter);
        }
    
        public virtual int Sp_NewPaymentSchedule_test(Nullable<int> rid)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_NewPaymentSchedule_test", ridParameter);
        }
    
        public virtual int Sp_NewSchemereturn(Nullable<int> onlineapplicationid, Nullable<int> schemeid)
        {
            var onlineapplicationidParameter = onlineapplicationid.HasValue ?
                new ObjectParameter("Onlineapplicationid", onlineapplicationid) :
                new ObjectParameter("Onlineapplicationid", typeof(int));
    
            var schemeidParameter = schemeid.HasValue ?
                new ObjectParameter("schemeid", schemeid) :
                new ObjectParameter("schemeid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_NewSchemereturn", onlineapplicationidParameter, schemeidParameter);
        }
    
        public virtual ObjectResult<Sp_PaymentDemand_Result> Sp_PaymentDemand(Nullable<int> type, Nullable<int> departmentId, Nullable<int> sector, Nullable<int> block)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var sectorParameter = sector.HasValue ?
                new ObjectParameter("sector", sector) :
                new ObjectParameter("sector", typeof(int));
    
            var blockParameter = block.HasValue ?
                new ObjectParameter("block", block) :
                new ObjectParameter("block", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PaymentDemand_Result>("Sp_PaymentDemand", typeParameter, departmentIdParameter, sectorParameter, blockParameter);
        }
    
        public virtual ObjectResult<Sp_PaymentDemand_test_Result> Sp_PaymentDemand_test(Nullable<int> type, Nullable<int> departmentId, Nullable<int> sector, Nullable<int> block)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var sectorParameter = sector.HasValue ?
                new ObjectParameter("sector", sector) :
                new ObjectParameter("sector", typeof(int));
    
            var blockParameter = block.HasValue ?
                new ObjectParameter("block", block) :
                new ObjectParameter("block", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_PaymentDemand_test_Result>("Sp_PaymentDemand_test", typeParameter, departmentIdParameter, sectorParameter, blockParameter);
        }
    
        public virtual int Sp_PaymentReSchedule(Nullable<int> rid, Nullable<decimal> principle)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("rid", rid) :
                new ObjectParameter("rid", typeof(int));
    
            var principleParameter = principle.HasValue ?
                new ObjectParameter("Principle", principle) :
                new ObjectParameter("Principle", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PaymentReSchedule", ridParameter, principleParameter);
        }
    
        public virtual int Sp_PropertyBank(string list, Nullable<int> scheme, Nullable<int> department, Nullable<int> sector, Nullable<int> block, Nullable<int> propertType, Nullable<int> floorArea, string registry)
        {
            var listParameter = list != null ?
                new ObjectParameter("list", list) :
                new ObjectParameter("list", typeof(string));
    
            var schemeParameter = scheme.HasValue ?
                new ObjectParameter("Scheme", scheme) :
                new ObjectParameter("Scheme", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var sectorParameter = sector.HasValue ?
                new ObjectParameter("Sector", sector) :
                new ObjectParameter("Sector", typeof(int));
    
            var blockParameter = block.HasValue ?
                new ObjectParameter("block", block) :
                new ObjectParameter("block", typeof(int));
    
            var propertTypeParameter = propertType.HasValue ?
                new ObjectParameter("PropertType", propertType) :
                new ObjectParameter("PropertType", typeof(int));
    
            var floorAreaParameter = floorArea.HasValue ?
                new ObjectParameter("floorArea", floorArea) :
                new ObjectParameter("floorArea", typeof(int));
    
            var registryParameter = registry != null ?
                new ObjectParameter("Registry", registry) :
                new ObjectParameter("Registry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PropertyBank", listParameter, schemeParameter, departmentParameter, sectorParameter, blockParameter, propertTypeParameter, floorAreaParameter, registryParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int Sp_Report_Type(Nullable<int> sectorid, Nullable<int> departmentid, Nullable<int> type)
        {
            var sectoridParameter = sectorid.HasValue ?
                new ObjectParameter("sectorid", sectorid) :
                new ObjectParameter("sectorid", typeof(int));
    
            var departmentidParameter = departmentid.HasValue ?
                new ObjectParameter("departmentid", departmentid) :
                new ObjectParameter("departmentid", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Report_Type", sectoridParameter, departmentidParameter, typeParameter);
        }
    
        public virtual int Sp_ServiceReportDepartment_Report(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ServiceReportDepartment_Report", departmentIdParameter);
        }
    
        public virtual int Sp_ServiceReportDepartment_Report_letter(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ServiceReportDepartment_Report_letter", departmentIdParameter);
        }
    
        public virtual int Sp_ServiceReportDepartment_Report_test(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ServiceReportDepartment_Report_test", departmentIdParameter);
        }
    
        public virtual int Sp_ServiceReportDepartment_Report1(Nullable<int> departmentId)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ServiceReportDepartment_Report1", departmentIdParameter);
        }
    
        public virtual ObjectResult<Sp_ServiceReportDepartmentWise_Result> Sp_ServiceReportDepartmentWise(Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string requestthru)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var requestthruParameter = requestthru != null ?
                new ObjectParameter("requestthru", requestthru) :
                new ObjectParameter("requestthru", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ServiceReportDepartmentWise_Result>("Sp_ServiceReportDepartmentWise", departmentIdParameter, startDateParameter, endDateParameter, requestthruParameter);
        }
    
        public virtual ObjectResult<sp_ServiceRequestGraph_Result> sp_ServiceRequestGraph(Nullable<int> departmentId, Nullable<int> serviceId, Nullable<int> statusId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string requestThrough, string reportFlag)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("StatusId", statusId) :
                new ObjectParameter("StatusId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var requestThroughParameter = requestThrough != null ?
                new ObjectParameter("RequestThrough", requestThrough) :
                new ObjectParameter("RequestThrough", typeof(string));
    
            var reportFlagParameter = reportFlag != null ?
                new ObjectParameter("ReportFlag", reportFlag) :
                new ObjectParameter("ReportFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ServiceRequestGraph_Result>("sp_ServiceRequestGraph", departmentIdParameter, serviceIdParameter, statusIdParameter, startDateParameter, endDateParameter, requestThroughParameter, reportFlagParameter);
        }
    
        public virtual ObjectResult<Sp_ServiceStatusReportByServiceType_Result> Sp_ServiceStatusReportByServiceType(Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string requestThrough)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var requestThroughParameter = requestThrough != null ?
                new ObjectParameter("RequestThrough", requestThrough) :
                new ObjectParameter("RequestThrough", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ServiceStatusReportByServiceType_Result>("Sp_ServiceStatusReportByServiceType", departmentIdParameter, startDateParameter, endDateParameter, requestThroughParameter);
        }
    
        public virtual int Sp_ServiceStatusReportByTimeLine(Nullable<int> departmentId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string requestThrough, Nullable<int> type)
        {
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("DepartmentId", departmentId) :
                new ObjectParameter("DepartmentId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var requestThroughParameter = requestThrough != null ?
                new ObjectParameter("RequestThrough", requestThrough) :
                new ObjectParameter("RequestThrough", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ServiceStatusReportByTimeLine", departmentIdParameter, startDateParameter, endDateParameter, requestThroughParameter, typeParameter);
        }
    
        public virtual ObjectResult<SP_StatusMasterByRole_Result> SP_StatusMasterByRole(string roleName, Nullable<System.DateTime> filterDate, string filterType, Nullable<int> filterId)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var filterDateParameter = filterDate.HasValue ?
                new ObjectParameter("FilterDate", filterDate) :
                new ObjectParameter("FilterDate", typeof(System.DateTime));
    
            var filterTypeParameter = filterType != null ?
                new ObjectParameter("FilterType", filterType) :
                new ObjectParameter("FilterType", typeof(string));
    
            var filterIdParameter = filterId.HasValue ?
                new ObjectParameter("FilterId", filterId) :
                new ObjectParameter("FilterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StatusMasterByRole_Result>("SP_StatusMasterByRole", roleNameParameter, filterDateParameter, filterTypeParameter, filterIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_Update_Extension_Due_and_Given_Date(Nullable<int> rID, Nullable<System.DateTime> extension_Given_Date, Nullable<System.DateTime> extension_Due_Date)
        {
            var rIDParameter = rID.HasValue ?
                new ObjectParameter("RID", rID) :
                new ObjectParameter("RID", typeof(int));
    
            var extension_Given_DateParameter = extension_Given_Date.HasValue ?
                new ObjectParameter("Extension_Given_Date", extension_Given_Date) :
                new ObjectParameter("Extension_Given_Date", typeof(System.DateTime));
    
            var extension_Due_DateParameter = extension_Due_Date.HasValue ?
                new ObjectParameter("Extension_Due_Date", extension_Due_Date) :
                new ObjectParameter("Extension_Due_Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_Update_Extension_Due_and_Given_Date", rIDParameter, extension_Given_DateParameter, extension_Due_DateParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SpAccountLedger_Result> SpAccountLedger(Nullable<int> rid)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("Rid", rid) :
                new ObjectParameter("Rid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAccountLedger_Result>("SpAccountLedger", ridParameter);
        }
    
        public virtual int spAddEmployee(string name, string city, string department, string gender)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddEmployee", nameParameter, cityParameter, departmentParameter, genderParameter);
        }
    
        public virtual ObjectResult<SpAllotteeList_Result> SpAllotteeList(Nullable<int> schemeId, Nullable<int> departmentId, Nullable<System.DateTime> allotmentdate)
        {
            var schemeIdParameter = schemeId.HasValue ?
                new ObjectParameter("schemeId", schemeId) :
                new ObjectParameter("schemeId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            var allotmentdateParameter = allotmentdate.HasValue ?
                new ObjectParameter("allotmentdate", allotmentdate) :
                new ObjectParameter("allotmentdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAllotteeList_Result>("SpAllotteeList", schemeIdParameter, departmentIdParameter, allotmentdateParameter);
        }
    
        public virtual ObjectResult<SpAllotteeListPaymentSchedule_Result> SpAllotteeListPaymentSchedule(Nullable<int> schemeId, Nullable<int> departmentId)
        {
            var schemeIdParameter = schemeId.HasValue ?
                new ObjectParameter("schemeId", schemeId) :
                new ObjectParameter("schemeId", typeof(int));
    
            var departmentIdParameter = departmentId.HasValue ?
                new ObjectParameter("departmentId", departmentId) :
                new ObjectParameter("departmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAllotteeListPaymentSchedule_Result>("SpAllotteeListPaymentSchedule", schemeIdParameter, departmentIdParameter);
        }
    
        public virtual int SpAmalgamateProperties(string rid, Nullable<int> pid)
        {
            var ridParameter = rid != null ?
                new ObjectParameter("Rid", rid) :
                new ObjectParameter("Rid", typeof(string));
    
            var pidParameter = pid.HasValue ?
                new ObjectParameter("Pid", pid) :
                new ObjectParameter("Pid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAmalgamateProperties", ridParameter, pidParameter);
        }
    
        public virtual ObjectResult<spGetAllEmployees_Result> spGetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllEmployees_Result>("spGetAllEmployees");
        }
    
        public virtual int spUpdateEmployee(Nullable<int> empId, string name, string city, string department, string gender)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateEmployee", empIdParameter, nameParameter, cityParameter, departmentParameter, genderParameter);
        }
    
        public virtual int UpdateReceipt(Nullable<long> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateReceipt", idParameter);
        }
    
        public virtual int usp_DriverPerformanceReport(string drivername, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> startRowIndex, Nullable<int> pageSize)
        {
            var drivernameParameter = drivername != null ?
                new ObjectParameter("drivername", drivername) :
                new ObjectParameter("drivername", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_DriverPerformanceReport", drivernameParameter, fromDateParameter, todateParameter, startRowIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_DriverRouteDetailReport_Result> usp_DriverRouteDetailReport(string selectRoute, Nullable<int> startRowIndex, Nullable<int> pageSize)
        {
            var selectRouteParameter = selectRoute != null ?
                new ObjectParameter("SelectRoute", selectRoute) :
                new ObjectParameter("SelectRoute", typeof(string));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DriverRouteDetailReport_Result>("usp_DriverRouteDetailReport", selectRouteParameter, startRowIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_DriverRouteReport_Result> usp_DriverRouteReport(Nullable<System.DateTime> selectDate, Nullable<int> startRowIndex, Nullable<int> pageSize)
        {
            var selectDateParameter = selectDate.HasValue ?
                new ObjectParameter("SelectDate", selectDate) :
                new ObjectParameter("SelectDate", typeof(System.DateTime));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_DriverRouteReport_Result>("usp_DriverRouteReport", selectDateParameter, startRowIndexParameter, pageSizeParameter);
        }
    
        public virtual int usp_GetDonationByDateFilter(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<bool> isInGenuity, Nullable<bool> isWeb, Nullable<bool> isIncoming, Nullable<bool> isFillerBlast, Nullable<bool> isCancelledDonation, Nullable<bool> isAgentBreakdown, string routeNameList)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var isInGenuityParameter = isInGenuity.HasValue ?
                new ObjectParameter("isInGenuity", isInGenuity) :
                new ObjectParameter("isInGenuity", typeof(bool));
    
            var isWebParameter = isWeb.HasValue ?
                new ObjectParameter("isWeb", isWeb) :
                new ObjectParameter("isWeb", typeof(bool));
    
            var isIncomingParameter = isIncoming.HasValue ?
                new ObjectParameter("isIncoming", isIncoming) :
                new ObjectParameter("isIncoming", typeof(bool));
    
            var isFillerBlastParameter = isFillerBlast.HasValue ?
                new ObjectParameter("isFillerBlast", isFillerBlast) :
                new ObjectParameter("isFillerBlast", typeof(bool));
    
            var isCancelledDonationParameter = isCancelledDonation.HasValue ?
                new ObjectParameter("isCancelledDonation", isCancelledDonation) :
                new ObjectParameter("isCancelledDonation", typeof(bool));
    
            var isAgentBreakdownParameter = isAgentBreakdown.HasValue ?
                new ObjectParameter("isAgentBreakdown", isAgentBreakdown) :
                new ObjectParameter("isAgentBreakdown", typeof(bool));
    
            var routeNameListParameter = routeNameList != null ?
                new ObjectParameter("routeNameList", routeNameList) :
                new ObjectParameter("routeNameList", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetDonationByDateFilter", fromDateParameter, todateParameter, isInGenuityParameter, isWebParameter, isIncomingParameter, isFillerBlastParameter, isCancelledDonationParameter, isAgentBreakdownParameter, routeNameListParameter);
        }
    
        public virtual ObjectResult<usp_GetDonationCount_Result> usp_GetDonationCount(Nullable<System.DateTime> forDate)
        {
            var forDateParameter = forDate.HasValue ?
                new ObjectParameter("ForDate", forDate) :
                new ObjectParameter("ForDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetDonationCount_Result>("usp_GetDonationCount", forDateParameter);
        }
    
        public virtual ObjectResult<usp_getDonationHistory_Result> usp_getDonationHistory(Nullable<int> donationId)
        {
            var donationIdParameter = donationId.HasValue ?
                new ObjectParameter("donationId", donationId) :
                new ObjectParameter("donationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_getDonationHistory_Result>("usp_getDonationHistory", donationIdParameter);
        }
    
        public virtual ObjectResult<usp_GetFillerBlastReport_Result> usp_GetFillerBlastReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string zipCode, string routeName)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("zipCode", zipCode) :
                new ObjectParameter("zipCode", typeof(string));
    
            var routeNameParameter = routeName != null ?
                new ObjectParameter("routeName", routeName) :
                new ObjectParameter("routeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetFillerBlastReport_Result>("usp_GetFillerBlastReport", fromDateParameter, toDateParameter, zipCodeParameter, routeNameParameter);
        }
    
        public virtual ObjectResult<usp_GetPickupCountByPriority_Result> usp_GetPickupCountByPriority()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetPickupCountByPriority_Result>("usp_GetPickupCountByPriority");
        }
    
        public virtual ObjectResult<usp_GetRecentDonation_Result> usp_GetRecentDonation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetRecentDonation_Result>("usp_GetRecentDonation");
        }
    
        public virtual ObjectResult<Nullable<int>> usp_getServiceCheck(Nullable<int> rid, Nullable<int> templateId)
        {
            var ridParameter = rid.HasValue ?
                new ObjectParameter("Rid", rid) :
                new ObjectParameter("Rid", typeof(int));
    
            var templateIdParameter = templateId.HasValue ?
                new ObjectParameter("TemplateId", templateId) :
                new ObjectParameter("TemplateId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("usp_getServiceCheck", ridParameter, templateIdParameter);
        }
    
        public virtual ObjectResult<usp_GetTodayPickupSchedule_Result> usp_GetTodayPickupSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTodayPickupSchedule_Result>("usp_GetTodayPickupSchedule");
        }
    
        public virtual int usp_GetWeightReport(string routeNameList, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> startRowIndex, Nullable<int> pageSize)
        {
            var routeNameListParameter = routeNameList != null ?
                new ObjectParameter("routeNameList", routeNameList) :
                new ObjectParameter("routeNameList", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_GetWeightReport", routeNameListParameter, fromDateParameter, todateParameter, startRowIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_MassRescheduleReport_Result> usp_MassRescheduleReport(string routeNameList, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate, Nullable<int> startRowIndex, Nullable<int> pageSize)
        {
            var routeNameListParameter = routeNameList != null ?
                new ObjectParameter("routeNameList", routeNameList) :
                new ObjectParameter("routeNameList", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_MassRescheduleReport_Result>("usp_MassRescheduleReport", routeNameListParameter, fromDateParameter, todateParameter, startRowIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_PickUpTrendLast12Month_Result> usp_PickUpTrendLast12Month()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_PickUpTrendLast12Month_Result>("usp_PickUpTrendLast12Month");
        }
    
        public virtual ObjectResult<usp_ScannedDriverReport_Result> usp_ScannedDriverReport(string selectRoute, Nullable<int> startRowIndex, Nullable<int> pageSize)
        {
            var selectRouteParameter = selectRoute != null ?
                new ObjectParameter("SelectRoute", selectRoute) :
                new ObjectParameter("SelectRoute", typeof(string));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_ScannedDriverReport_Result>("usp_ScannedDriverReport", selectRouteParameter, startRowIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_SummaryReport_Result> usp_SummaryReport(string shownBy, Nullable<int> year, string monthName, string routeType, Nullable<int> startRowIndex, Nullable<int> pageSize)
        {
            var shownByParameter = shownBy != null ?
                new ObjectParameter("ShownBy", shownBy) :
                new ObjectParameter("ShownBy", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var monthNameParameter = monthName != null ?
                new ObjectParameter("MonthName", monthName) :
                new ObjectParameter("MonthName", typeof(string));
    
            var routeTypeParameter = routeType != null ?
                new ObjectParameter("RouteType", routeType) :
                new ObjectParameter("RouteType", typeof(string));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SummaryReport_Result>("usp_SummaryReport", shownByParameter, yearParameter, monthNameParameter, routeTypeParameter, startRowIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<usp_Upload_Manage_DriverReport_Result> usp_Upload_Manage_DriverReport(string routeNameList, Nullable<int> startRowIndex, Nullable<int> pageSize)
        {
            var routeNameListParameter = routeNameList != null ?
                new ObjectParameter("routeNameList", routeNameList) :
                new ObjectParameter("routeNameList", typeof(string));
    
            var startRowIndexParameter = startRowIndex.HasValue ?
                new ObjectParameter("startRowIndex", startRowIndex) :
                new ObjectParameter("startRowIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Upload_Manage_DriverReport_Result>("usp_Upload_Manage_DriverReport", routeNameListParameter, startRowIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<USPS_GET_ALL_DEPTLIST_GAURAV_Result> USPS_GET_ALL_DEPTLIST_GAURAV()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPS_GET_ALL_DEPTLIST_GAURAV_Result>("USPS_GET_ALL_DEPTLIST_GAURAV");
        }
    
        public virtual ObjectResult<USPS_GETKYA_DETAILBYDEPARTMENT_Result> USPS_GETKYA_DETAILBYDEPARTMENT(Nullable<int> departmentID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPS_GETKYA_DETAILBYDEPARTMENT_Result>("USPS_GETKYA_DETAILBYDEPARTMENT", departmentIDParameter);
        }
    
        public virtual int USPS_UPDATE_ALLOTEE_MOBILENUMBER(Nullable<int> registraionID, Nullable<int> departmentID, string alloteeName, Nullable<int> aadharID, Nullable<int> mobileNo, ObjectParameter returnVal)
        {
            var registraionIDParameter = registraionID.HasValue ?
                new ObjectParameter("RegistraionID", registraionID) :
                new ObjectParameter("RegistraionID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var alloteeNameParameter = alloteeName != null ?
                new ObjectParameter("AlloteeName", alloteeName) :
                new ObjectParameter("AlloteeName", typeof(string));
    
            var aadharIDParameter = aadharID.HasValue ?
                new ObjectParameter("AadharID", aadharID) :
                new ObjectParameter("AadharID", typeof(int));
    
            var mobileNoParameter = mobileNo.HasValue ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPS_UPDATE_ALLOTEE_MOBILENUMBER", registraionIDParameter, departmentIDParameter, alloteeNameParameter, aadharIDParameter, mobileNoParameter, returnVal);
        }
    
        public virtual int USPS_UPDATE_ALLOTEE_MOBILENUMBER_GAURAV(Nullable<int> registrationID, Nullable<int> departmentID, string alloteeName, string aadharID, string mobileNo, ObjectParameter returnValue)
        {
            var registrationIDParameter = registrationID.HasValue ?
                new ObjectParameter("RegistrationID", registrationID) :
                new ObjectParameter("RegistrationID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var alloteeNameParameter = alloteeName != null ?
                new ObjectParameter("AlloteeName", alloteeName) :
                new ObjectParameter("AlloteeName", typeof(string));
    
            var aadharIDParameter = aadharID != null ?
                new ObjectParameter("AadharID", aadharID) :
                new ObjectParameter("AadharID", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("USPS_UPDATE_ALLOTEE_MOBILENUMBER_GAURAV", registrationIDParameter, departmentIDParameter, alloteeNameParameter, aadharIDParameter, mobileNoParameter, returnValue);
        }
    }
}
